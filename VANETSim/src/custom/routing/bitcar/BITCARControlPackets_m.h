//
// Generated file, do not edit! Created by nedtool 4.6 from custom/routing/bitcar/BITCARControlPackets.msg.
//

#ifndef _BITCARCONTROLPACKETS_M_H_
#define _BITCARCONTROLPACKETS_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "IPv4Address.h"
#include "simtime_t.h"
// }}

/**
 * Struct generated from custom/routing/bitcar/BITCARControlPackets.msg:29 by nedtool.
 */
struct UnreachableNodeBITCAR
{
    UnreachableNodeBITCAR();
    IPv4Address addr;
    unsigned int seqNum;
};

void doPacking(cCommBuffer *b, UnreachableNodeBITCAR& a);
void doUnpacking(cCommBuffer *b, UnreachableNodeBITCAR& a);

/**
 * Enum generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:35</tt> by nedtool.
 * <pre>
 * enum BITCARControlPacketType
 * {
 * 
 *     RREQ = 1;
 *     RREP = 2;
 *     RERR = 3;
 *     RREPACK = 4;
 * }
 * </pre>
 */
enum BITCARControlPacketType {
    RREQ = 1,
    RREP = 2,
    RERR = 3,
    RREPACK = 4
};

/**
 * Class generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:46</tt> by nedtool.
 * <pre>
 * //
 * // Base packet for AODV Control Packets
 * //
 * packet BITCARControlPacket
 * {
 *     unsigned int packetType;
 * }
 * </pre>
 */
class BITCARControlPacket : public ::cPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const BITCARControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BITCARControlPacket&);

  public:
    BITCARControlPacket(const char *name=NULL, int kind=0);
    BITCARControlPacket(const BITCARControlPacket& other);
    virtual ~BITCARControlPacket();
    BITCARControlPacket& operator=(const BITCARControlPacket& other);
    virtual BITCARControlPacket *dup() const {return new BITCARControlPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, BITCARControlPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BITCARControlPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:54</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Request
 * //
 * class BITCARRREQ extends BITCARControlPacket
 * {
 *     unsigned int packetType = RREQ;
 *     bool joinFlag;
 *     bool repairFlag;
 *     bool gratuitousRREPFlag;
 *     bool destOnlyFlag;
 *     bool unknownSeqNumFlag;
 *     unsigned int hopCount;
 *     unsigned int rreqId;
 *     IPv4Address destAddr;
 *     unsigned int destSeqNum;
 *     IPv4Address originatorAddr;
 *     unsigned int originatorSeqNum;
 * }
 * </pre>
 */
class BITCARRREQ : public ::BITCARControlPacket
{
  protected:
    unsigned int packetType_var;
    bool joinFlag_var;
    bool repairFlag_var;
    bool gratuitousRREPFlag_var;
    bool destOnlyFlag_var;
    bool unknownSeqNumFlag_var;
    unsigned int hopCount_var;
    unsigned int rreqId_var;
    IPv4Address destAddr_var;
    unsigned int destSeqNum_var;
    IPv4Address originatorAddr_var;
    unsigned int originatorSeqNum_var;

  private:
    void copy(const BITCARRREQ& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BITCARRREQ&);

  public:
    BITCARRREQ(const char *name=NULL);
    BITCARRREQ(const BITCARRREQ& other);
    virtual ~BITCARRREQ();
    BITCARRREQ& operator=(const BITCARRREQ& other);
    virtual BITCARRREQ *dup() const {return new BITCARRREQ(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual bool getJoinFlag() const;
    virtual void setJoinFlag(bool joinFlag);
    virtual bool getRepairFlag() const;
    virtual void setRepairFlag(bool repairFlag);
    virtual bool getGratuitousRREPFlag() const;
    virtual void setGratuitousRREPFlag(bool gratuitousRREPFlag);
    virtual bool getDestOnlyFlag() const;
    virtual void setDestOnlyFlag(bool destOnlyFlag);
    virtual bool getUnknownSeqNumFlag() const;
    virtual void setUnknownSeqNumFlag(bool unknownSeqNumFlag);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getRreqId() const;
    virtual void setRreqId(unsigned int rreqId);
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<BITCARRREQ*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual IPv4Address& getOriginatorAddr();
    virtual const IPv4Address& getOriginatorAddr() const {return const_cast<BITCARRREQ*>(this)->getOriginatorAddr();}
    virtual void setOriginatorAddr(const IPv4Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
};

inline void doPacking(cCommBuffer *b, BITCARRREQ& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BITCARRREQ& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:73</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Reply
 * //
 * class BITCARRREP extends BITCARControlPacket
 * {
 *     unsigned int packetType = RREP;
 *     bool repairFlag;
 *     bool ackRequiredFlag;
 *     unsigned int prefixSize;
 *     unsigned int hopCount;
 *     IPv4Address destAddr;
 *     unsigned int destSeqNum;
 *     IPv4Address originatorAddr;
 *     unsigned int originatorSeqNum;
 *     simtime_t lifeTime;
 * }
 * </pre>
 */
class BITCARRREP : public ::BITCARControlPacket
{
  protected:
    unsigned int packetType_var;
    bool repairFlag_var;
    bool ackRequiredFlag_var;
    unsigned int prefixSize_var;
    unsigned int hopCount_var;
    IPv4Address destAddr_var;
    unsigned int destSeqNum_var;
    IPv4Address originatorAddr_var;
    unsigned int originatorSeqNum_var;
    simtime_t lifeTime_var;

  private:
    void copy(const BITCARRREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BITCARRREP&);

  public:
    BITCARRREP(const char *name=NULL);
    BITCARRREP(const BITCARRREP& other);
    virtual ~BITCARRREP();
    BITCARRREP& operator=(const BITCARRREP& other);
    virtual BITCARRREP *dup() const {return new BITCARRREP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual bool getRepairFlag() const;
    virtual void setRepairFlag(bool repairFlag);
    virtual bool getAckRequiredFlag() const;
    virtual void setAckRequiredFlag(bool ackRequiredFlag);
    virtual unsigned int getPrefixSize() const;
    virtual void setPrefixSize(unsigned int prefixSize);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<BITCARRREP*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual IPv4Address& getOriginatorAddr();
    virtual const IPv4Address& getOriginatorAddr() const {return const_cast<BITCARRREP*>(this)->getOriginatorAddr();}
    virtual void setOriginatorAddr(const IPv4Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
    virtual simtime_t getLifeTime() const;
    virtual void setLifeTime(simtime_t lifeTime);
};

inline void doPacking(cCommBuffer *b, BITCARRREP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BITCARRREP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:90</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Error
 * //
 * class BITCARRERR extends BITCARControlPacket
 * {
 *     unsigned int packetType = RERR;
 *     UnreachableNodeBITCAR unreachableNodes[];
 *     bool noDeleteFlag;
 *     unsigned int destCount;
 * }
 * </pre>
 */
class BITCARRERR : public ::BITCARControlPacket
{
  protected:
    unsigned int packetType_var;
    UnreachableNodeBITCAR *unreachableNodes_var; // array ptr
    unsigned int unreachableNodes_arraysize;
    bool noDeleteFlag_var;
    unsigned int destCount_var;

  private:
    void copy(const BITCARRERR& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BITCARRERR&);

  public:
    BITCARRERR(const char *name=NULL);
    BITCARRERR(const BITCARRERR& other);
    virtual ~BITCARRERR();
    BITCARRERR& operator=(const BITCARRERR& other);
    virtual BITCARRERR *dup() const {return new BITCARRERR(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual void setUnreachableNodesArraySize(unsigned int size);
    virtual unsigned int getUnreachableNodesArraySize() const;
    virtual UnreachableNodeBITCAR& getUnreachableNodes(unsigned int k);
    virtual const UnreachableNodeBITCAR& getUnreachableNodes(unsigned int k) const {return const_cast<BITCARRERR*>(this)->getUnreachableNodes(k);}
    virtual void setUnreachableNodes(unsigned int k, const UnreachableNodeBITCAR& unreachableNodes);
    virtual bool getNoDeleteFlag() const;
    virtual void setNoDeleteFlag(bool noDeleteFlag);
    virtual unsigned int getDestCount() const;
    virtual void setDestCount(unsigned int destCount);
};

inline void doPacking(cCommBuffer *b, BITCARRERR& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BITCARRERR& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:101</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODV Route Reply ACK
 * //
 * class BITCARRREPACK extends BITCARControlPacket
 * {
 *     unsigned int packetType = RREPACK;
 * }
 * </pre>
 */
class BITCARRREPACK : public ::BITCARControlPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const BITCARRREPACK& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const BITCARRREPACK&);

  public:
    BITCARRREPACK(const char *name=NULL);
    BITCARRREPACK(const BITCARRREPACK& other);
    virtual ~BITCARRREPACK();
    BITCARRREPACK& operator=(const BITCARRREPACK& other);
    virtual BITCARRREPACK *dup() const {return new BITCARRREPACK(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, BITCARRREPACK& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, BITCARRREPACK& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>custom/routing/bitcar/BITCARControlPackets.msg:109</tt> by nedtool.
 * <pre>
 * //
 * // Represents a timer for a Route Reply packet
 * //
 * message WaitForBITCARVANETRREP
 * {
 *     IPv4Address destAddr;
 *     unsigned int lastTTL;
 *     bool fromInvalidEntry;
 * }
 * </pre>
 */
class WaitForBITCARVANETRREP : public ::cMessage
{
  protected:
    IPv4Address destAddr_var;
    unsigned int lastTTL_var;
    bool fromInvalidEntry_var;

  private:
    void copy(const WaitForBITCARVANETRREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaitForBITCARVANETRREP&);

  public:
    WaitForBITCARVANETRREP(const char *name=NULL, int kind=0);
    WaitForBITCARVANETRREP(const WaitForBITCARVANETRREP& other);
    virtual ~WaitForBITCARVANETRREP();
    WaitForBITCARVANETRREP& operator=(const WaitForBITCARVANETRREP& other);
    virtual WaitForBITCARVANETRREP *dup() const {return new WaitForBITCARVANETRREP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<WaitForBITCARVANETRREP*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual unsigned int getLastTTL() const;
    virtual void setLastTTL(unsigned int lastTTL);
    virtual bool getFromInvalidEntry() const;
    virtual void setFromInvalidEntry(bool fromInvalidEntry);
};

inline void doPacking(cCommBuffer *b, WaitForBITCARVANETRREP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WaitForBITCARVANETRREP& obj) {obj.parsimUnpack(b);}


#endif // ifndef _BITCARCONTROLPACKETS_M_H_

