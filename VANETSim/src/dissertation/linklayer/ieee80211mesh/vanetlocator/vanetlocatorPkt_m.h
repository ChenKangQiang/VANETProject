//
// Generated file, do not edit! Created by nedtool 4.6 from linklayer/ieee80211mesh/vanetlocator/vanetlocatorPkt.msg.
//

#ifndef _VANETLOCATORPKT_M_H_
#define _VANETLOCATORPKT_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "IPv4Address.h"
#include "MACAddress.h"
#include "VanetAddress.h"
// }}

/**
 * Enum generated from <tt>linklayer/ieee80211mesh/vanetlocator/vanetlocatorPkt.msg:32</tt> by nedtool.
 * <pre>
 * enum VanetLocatorOpcode
 * {
 * 
 *     LocatorAssoc = 1;
 *     LocatorDisAssoc = 2;
 *     LocatorAskAddress = 3;
 *     LocatorAckAddress = 4;
 *     RequestAddress = 5;
 *     ReplyAddress = 6;
 * }
 * </pre>
 */
enum VanetLocatorOpcode {
    LocatorAssoc = 1,
    LocatorDisAssoc = 2,
    LocatorAskAddress = 3,
    LocatorAckAddress = 4,
    RequestAddress = 5,
    ReplyAddress = 6
};

/**
 * Class generated from <tt>linklayer/ieee80211mesh/vanetlocator/vanetlocatorPkt.msg:42</tt> by nedtool.
 * <pre>
 * packet VanetLocatorPkt
 * {
 *     byteLength = 22;//6+6+4+4+2
 *     int opcode @enum(VanetLocatorOpcode);
 *     VanetAddress origin;
 *     unsigned int sequence;
 *     MACAddress apMACAddress;
 *     MACAddress staMACAddress;
 *     IPv4Address apIPAddress;
 *     IPv4Address staIPAddress;
 * }
 * </pre>
 */
class VanetLocatorPkt : public ::cPacket
{
  protected:
    int opcode_var;
    VanetAddress origin_var;
    unsigned int sequence_var;
    MACAddress apMACAddress_var;
    MACAddress staMACAddress_var;
    IPv4Address apIPAddress_var;
    IPv4Address staIPAddress_var;

  private:
    void copy(const VanetLocatorPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VanetLocatorPkt&);

  public:
    VanetLocatorPkt(const char *name=NULL, int kind=0);
    VanetLocatorPkt(const VanetLocatorPkt& other);
    virtual ~VanetLocatorPkt();
    VanetLocatorPkt& operator=(const VanetLocatorPkt& other);
    virtual VanetLocatorPkt *dup() const {return new VanetLocatorPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getOpcode() const;
    virtual void setOpcode(int opcode);
    virtual VanetAddress& getOrigin();
    virtual const VanetAddress& getOrigin() const {return const_cast<VanetLocatorPkt*>(this)->getOrigin();}
    virtual void setOrigin(const VanetAddress& origin);
    virtual unsigned int getSequence() const;
    virtual void setSequence(unsigned int sequence);
    virtual MACAddress& getApMACAddress();
    virtual const MACAddress& getApMACAddress() const {return const_cast<VanetLocatorPkt*>(this)->getApMACAddress();}
    virtual void setApMACAddress(const MACAddress& apMACAddress);
    virtual MACAddress& getStaMACAddress();
    virtual const MACAddress& getStaMACAddress() const {return const_cast<VanetLocatorPkt*>(this)->getStaMACAddress();}
    virtual void setStaMACAddress(const MACAddress& staMACAddress);
    virtual IPv4Address& getApIPAddress();
    virtual const IPv4Address& getApIPAddress() const {return const_cast<VanetLocatorPkt*>(this)->getApIPAddress();}
    virtual void setApIPAddress(const IPv4Address& apIPAddress);
    virtual IPv4Address& getStaIPAddress();
    virtual const IPv4Address& getStaIPAddress() const {return const_cast<VanetLocatorPkt*>(this)->getStaIPAddress();}
    virtual void setStaIPAddress(const IPv4Address& staIPAddress);
};

inline void doPacking(cCommBuffer *b, VanetLocatorPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VanetLocatorPkt& obj) {obj.parsimUnpack(b);}


#endif // ifndef _VANETLOCATORPKT_M_H_

