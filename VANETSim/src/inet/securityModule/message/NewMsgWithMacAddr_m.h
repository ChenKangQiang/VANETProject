//
// Generated file, do not edit! Created by nedtool 4.6 from securityModule/message/NewMsgWithMacAddr.msg.
//

#ifndef _NEWMSGWITHMACADDR_M_H_
#define _NEWMSGWITHMACADDR_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "MACAddress.h"
#include "INETDefs.h"
// }}

/**
 * Class generated from <tt>securityModule/message/NewMsgWithMacAddr.msg:9</tt> by nedtool.
 * <pre>
 * // For Timeouts
 * packet newcMessage extends cMessage
 * {
 *     MACAddress MeshMACAddress_AuthTimeout;
 *     MACAddress senderMACAddr;
 * }
 * </pre>
 */
class newcMessage : public ::cMessage
{
  protected:
    MACAddress MeshMACAddress_AuthTimeout_var;
    MACAddress senderMACAddr_var;

  private:
    void copy(const newcMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const newcMessage&);

  public:
    newcMessage(const char *name=NULL, int kind=0);
    newcMessage(const newcMessage& other);
    virtual ~newcMessage();
    newcMessage& operator=(const newcMessage& other);
    virtual newcMessage *dup() const {return new newcMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual MACAddress& getMeshMACAddress_AuthTimeout();
    virtual const MACAddress& getMeshMACAddress_AuthTimeout() const {return const_cast<newcMessage*>(this)->getMeshMACAddress_AuthTimeout();}
    virtual void setMeshMACAddress_AuthTimeout(const MACAddress& MeshMACAddress_AuthTimeout);
    virtual MACAddress& getSenderMACAddr();
    virtual const MACAddress& getSenderMACAddr() const {return const_cast<newcMessage*>(this)->getSenderMACAddr();}
    virtual void setSenderMACAddr(const MACAddress& senderMACAddr);
};

inline void doPacking(cCommBuffer *b, newcMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, newcMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef _NEWMSGWITHMACADDR_M_H_

