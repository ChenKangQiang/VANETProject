//
// Generated file, do not edit! Created by nedtool 4.6 from applications/udpapp/UDPBasicPacketP2P.msg.
//

#ifndef _INET_UDPBASICPACKETP2P_M_H_
#define _INET_UDPBASICPACKETP2P_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/common/INETDefs.h"
#include "inet/networklayer/common/L3Address.h"
// }}


namespace inet {

/**
 * Enum generated from <tt>applications/udpapp/UDPBasicPacketP2P.msg:25</tt> by nedtool.
 * <pre>
 * enum PacketType
 * {
 * 
 *     REQUEST = 1;
 *     SEGMEN = 2;
 *     GENERAL = 3;
 *     CONFIRMATION = 4;
 * }
 * </pre>
 */
enum PacketType {
    REQUEST = 1,
    SEGMEN = 2,
    GENERAL = 3,
    CONFIRMATION = 4
};

/**
 * Class generated from <tt>applications/udpapp/UDPBasicPacketP2P.msg:33</tt> by nedtool.
 * <pre>
 * packet UDPBasicPacketP2P
 * {
 *     L3Address nodeId;
 *     L3Address destination;
 *     int type @enum(PacketType);
 *     int64_t segmentRequest = -1;
 *     uint64_t totalSize;
 *     uint64_t segmentId;
 *     uint16_t subSegmentId;
 *     uint16_t subSegmentRequest[];
 *     char mapSegments[];
 * }
 * </pre>
 */
class UDPBasicPacketP2P : public ::cPacket
{
  protected:
    L3Address nodeId_var;
    L3Address destination_var;
    int type_var;
    int64_t segmentRequest_var;
    uint64_t totalSize_var;
    uint64_t segmentId_var;
    uint16_t subSegmentId_var;
    uint16_t *subSegmentRequest_var; // array ptr
    unsigned int subSegmentRequest_arraysize;
    char *mapSegments_var; // array ptr
    unsigned int mapSegments_arraysize;

  private:
    void copy(const UDPBasicPacketP2P& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPBasicPacketP2P&);

  public:
    UDPBasicPacketP2P(const char *name=NULL, int kind=0);
    UDPBasicPacketP2P(const UDPBasicPacketP2P& other);
    virtual ~UDPBasicPacketP2P();
    UDPBasicPacketP2P& operator=(const UDPBasicPacketP2P& other);
    virtual UDPBasicPacketP2P *dup() const {return new UDPBasicPacketP2P(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual L3Address& getNodeId();
    virtual const L3Address& getNodeId() const {return const_cast<UDPBasicPacketP2P*>(this)->getNodeId();}
    virtual void setNodeId(const L3Address& nodeId);
    virtual L3Address& getDestination();
    virtual const L3Address& getDestination() const {return const_cast<UDPBasicPacketP2P*>(this)->getDestination();}
    virtual void setDestination(const L3Address& destination);
    virtual int getType() const;
    virtual void setType(int type);
    virtual int64_t getSegmentRequest() const;
    virtual void setSegmentRequest(int64_t segmentRequest);
    virtual uint64_t getTotalSize() const;
    virtual void setTotalSize(uint64_t totalSize);
    virtual uint64_t getSegmentId() const;
    virtual void setSegmentId(uint64_t segmentId);
    virtual uint16_t getSubSegmentId() const;
    virtual void setSubSegmentId(uint16_t subSegmentId);
    virtual void setSubSegmentRequestArraySize(unsigned int size);
    virtual unsigned int getSubSegmentRequestArraySize() const;
    virtual uint16_t getSubSegmentRequest(unsigned int k) const;
    virtual void setSubSegmentRequest(unsigned int k, uint16_t subSegmentRequest);
    virtual void setMapSegmentsArraySize(unsigned int size);
    virtual unsigned int getMapSegmentsArraySize() const;
    virtual char getMapSegments(unsigned int k) const;
    virtual void setMapSegments(unsigned int k, char mapSegments);
};

inline void doPacking(cCommBuffer *b, UDPBasicPacketP2P& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPBasicPacketP2P& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>applications/udpapp/UDPBasicPacketP2P.msg:46</tt> by nedtool.
 * <pre>
 * packet UDPBasicPacketP2PNotification
 * {
 *     L3Address nodeId;
 *     uint64_t seqnum;
 *     int mapSegmentsSize;
 *     char mapSegments[];
 * }
 * </pre>
 */
class UDPBasicPacketP2PNotification : public ::cPacket
{
  protected:
    L3Address nodeId_var;
    uint64_t seqnum_var;
    int mapSegmentsSize_var;
    char *mapSegments_var; // array ptr
    unsigned int mapSegments_arraysize;

  private:
    void copy(const UDPBasicPacketP2PNotification& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const UDPBasicPacketP2PNotification&);

  public:
    UDPBasicPacketP2PNotification(const char *name=NULL, int kind=0);
    UDPBasicPacketP2PNotification(const UDPBasicPacketP2PNotification& other);
    virtual ~UDPBasicPacketP2PNotification();
    UDPBasicPacketP2PNotification& operator=(const UDPBasicPacketP2PNotification& other);
    virtual UDPBasicPacketP2PNotification *dup() const {return new UDPBasicPacketP2PNotification(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual L3Address& getNodeId();
    virtual const L3Address& getNodeId() const {return const_cast<UDPBasicPacketP2PNotification*>(this)->getNodeId();}
    virtual void setNodeId(const L3Address& nodeId);
    virtual uint64_t getSeqnum() const;
    virtual void setSeqnum(uint64_t seqnum);
    virtual int getMapSegmentsSize() const;
    virtual void setMapSegmentsSize(int mapSegmentsSize);
    virtual void setMapSegmentsArraySize(unsigned int size);
    virtual unsigned int getMapSegmentsArraySize() const;
    virtual char getMapSegments(unsigned int k) const;
    virtual void setMapSegments(unsigned int k, char mapSegments);
};

inline void doPacking(cCommBuffer *b, UDPBasicPacketP2PNotification& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, UDPBasicPacketP2PNotification& obj) {obj.parsimUnpack(b);}

} // namespace inet

#endif // ifndef _INET_UDPBASICPACKETP2P_M_H_

