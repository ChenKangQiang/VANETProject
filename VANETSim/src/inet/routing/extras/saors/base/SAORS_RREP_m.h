//
// Generated file, do not edit! Created by nedtool 4.6 from routing/extras/saors/base/SAORS_RREP.msg.
//

#ifndef _INET__INETMANET_SAORS_RREP_M_H_
#define _INET__INETMANET_SAORS_RREP_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif

// cplusplus {{
#include "inet/routing/extras/dymo_fau/DYMO_RM_m.h"
#include "inet/routing/extras/dymo_fau/DYMO_PacketBBMessage_m.h"
#include "inet/routing/extras/dymo_fau/DYMO_AddressBlock.h"
#include "inet/routing/extras/dymo_fau/InspectorHelpers.h"
#include <vector>
#include <sys/types.h>
// }}


namespace inet {
namespace inetmanet {

/**
 * Class generated from <tt>routing/extras/saors/base/SAORS_RREP.msg:56</tt> by nedtool.
 * <pre>
 * //
 * // <b> The SAORS Routing-Reply Message </b>
 * //
 * // This is an extension of the DYMO_RM message for replying to the
 * // request for a path towards a destination. It includes two more fields,
 * // namely the searched destination and the replying node's probability
 * // of encountering this destination. This extra address field is
 * // included since the replying node has to enter its address as the
 * // original address. This was the initial nodes that transmitted the
 * // SAORS_RREQ will be able to differantiate whether the replies
 * // received define a path or an opportunity of meeting the requested
 * // destination, according to whether the seatched field in the 
 * // SOARS_RREPis empty or not.
 * //
 * // @see SAORSBase
 * //
 * // @author: Nikolaos Vastardis
 * //
 * message SAORS_RREP extends DYMO_RM
 * {
 *     DYMO_AddressBlock searchedNode;
 *     double deliveryProb;
 * }
 * </pre>
 */
class SAORS_RREP : public ::inet::inetmanet::DYMO_RM
{
  protected:
    DYMO_AddressBlock searchedNode_var;
    double deliveryProb_var;

  private:
    void copy(const SAORS_RREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SAORS_RREP&);

  public:
    SAORS_RREP(const char *name=NULL, int kind=0);
    SAORS_RREP(const SAORS_RREP& other);
    virtual ~SAORS_RREP();
    SAORS_RREP& operator=(const SAORS_RREP& other);
    virtual SAORS_RREP *dup() const {return new SAORS_RREP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual DYMO_AddressBlock& getSearchedNode();
    virtual const DYMO_AddressBlock& getSearchedNode() const {return const_cast<SAORS_RREP*>(this)->getSearchedNode();}
    virtual void setSearchedNode(const DYMO_AddressBlock& searchedNode);
    virtual double getDeliveryProb() const;
    virtual void setDeliveryProb(double deliveryProb);
};

inline void doPacking(cCommBuffer *b, SAORS_RREP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SAORS_RREP& obj) {obj.parsimUnpack(b);}

} // namespace inetmanet
} // namespace inet

#endif // ifndef _INET__INETMANET_SAORS_RREP_M_H_

