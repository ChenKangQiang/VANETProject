//
// Generated file, do not edit! Created by nedtool 4.6 from inet/networklayer/rsvp_te/IntServ.msg.
//

#ifndef _INTSERV_M_H_
#define _INTSERV_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "IPv4Address.h"
typedef std::vector<IPv4Address> IPAddressVector;
typedef std::vector<struct EroObj_t> EroVector;
typedef std::vector<struct FlowDescriptor_t> FlowDescriptorVector;
// }}

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:39 by nedtool.
 */
struct SessionObj_t
{
    SessionObj_t();
    int Tunnel_Id;
    int Extended_Tunnel_Id;
    IPv4Address DestAddress;
    int setupPri;
    int holdingPri;
};

void doPacking(cCommBuffer *b, SessionObj_t& a);
void doUnpacking(cCommBuffer *b, SessionObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:51 by nedtool.
 */
struct RsvpHopObj_t
{
    RsvpHopObj_t();
    IPv4Address Next_Hop_Address;
    IPv4Address Logical_Interface_Handle;
};

void doPacking(cCommBuffer *b, RsvpHopObj_t& a);
void doUnpacking(cCommBuffer *b, RsvpHopObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:60 by nedtool.
 */
struct SenderTemplateObj_t
{
    SenderTemplateObj_t();
    IPv4Address SrcAddress;
    int Lsp_Id;
};

void doPacking(cCommBuffer *b, SenderTemplateObj_t& a);
void doUnpacking(cCommBuffer *b, SenderTemplateObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:70 by nedtool.
 */
struct SenderTspecObj_t
{
    SenderTspecObj_t();
    double req_bandwidth;
};

void doPacking(cCommBuffer *b, SenderTspecObj_t& a);
void doUnpacking(cCommBuffer *b, SenderTspecObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:78 by nedtool.
 */
struct FlowSpecObj_t : public ::SenderTspecObj_t
{
    FlowSpecObj_t();
};

void doPacking(cCommBuffer *b, FlowSpecObj_t& a);
void doUnpacking(cCommBuffer *b, FlowSpecObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:85 by nedtool.
 */
struct FilterSpecObj_t : public ::SenderTemplateObj_t
{
    FilterSpecObj_t();
};

void doPacking(cCommBuffer *b, FilterSpecObj_t& a);
void doUnpacking(cCommBuffer *b, FilterSpecObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:92 by nedtool.
 */
struct LabelRequestObj_t
{
    LabelRequestObj_t();
    int prot;
};

void doPacking(cCommBuffer *b, LabelRequestObj_t& a);
void doUnpacking(cCommBuffer *b, LabelRequestObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:101 by nedtool.
 */
struct SenderDescriptor_t
{
    SenderDescriptor_t();
    SenderTemplateObj_t Sender_Template_Object;
    SenderTspecObj_t Sender_Tspec_Object;
};

void doPacking(cCommBuffer *b, SenderDescriptor_t& a);
void doUnpacking(cCommBuffer *b, SenderDescriptor_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:110 by nedtool.
 */
struct EroObj_t
{
    EroObj_t();
    bool L;
    IPv4Address node;
};

void doPacking(cCommBuffer *b, EroObj_t& a);
void doUnpacking(cCommBuffer *b, EroObj_t& a);

/**
 * Struct generated from inet/networklayer/rsvp_te/IntServ.msg:119 by nedtool.
 */
struct FlowDescriptor_t
{
    FlowDescriptor_t();
    FlowSpecObj_t Flowspec_Object;
    FilterSpecObj_t Filter_Spec_Object;
    IPAddressVector RRO;
    int label;
};

void doPacking(cCommBuffer *b, FlowDescriptor_t& a);
void doUnpacking(cCommBuffer *b, FlowDescriptor_t& a);


#endif // ifndef _INTSERV_M_H_

