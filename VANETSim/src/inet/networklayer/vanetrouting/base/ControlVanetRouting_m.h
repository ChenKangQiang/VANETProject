//
// Generated file, do not edit! Created by nedtool 4.6 from networklayer/vanetrouting/base/ControlVanetRouting.msg.
//

#ifndef _CONTROLVANETROUTING_M_H_
#define _CONTROLVANETROUTING_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "VanetAddress.h"
// }}

/**
 * Enum generated from <tt>networklayer/vanetrouting/base/ControlVanetRouting.msg:28</tt> by nedtool.
 * <pre>
 * enum VanetControlType
 * {
 * 
 *     VANET_ROUTE_NO_OPTION = 0;
 *     VANET_ROUTE_UPDATE = 1;
 *     VANET_ROUTE_NOROUTE = 2;
 * }
 * </pre>
 */
enum VanetControlType {
    VANET_ROUTE_NO_OPTION = 0,
    VANET_ROUTE_UPDATE = 1,
    VANET_ROUTE_NOROUTE = 2
};

/**
 * Class generated from <tt>networklayer/vanetrouting/base/ControlVanetRouting.msg:39</tt> by nedtool.
 * <pre>
 * //
 * // ICMP message class
 * //
 * packet ControlVanetRouting
 * {
 *     VanetAddress srcAddress;
 *     VanetAddress destAddress;
 *     int optionCode @enum(VanetControlType) = VANET_ROUTE_NO_OPTION;
 * }
 * </pre>
 */
class ControlVanetRouting : public ::cPacket
{
  protected:
    VanetAddress srcAddress_var;
    VanetAddress destAddress_var;
    int optionCode_var;

  private:
    void copy(const ControlVanetRouting& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ControlVanetRouting&);

  public:
    ControlVanetRouting(const char *name=NULL, int kind=0);
    ControlVanetRouting(const ControlVanetRouting& other);
    virtual ~ControlVanetRouting();
    ControlVanetRouting& operator=(const ControlVanetRouting& other);
    virtual ControlVanetRouting *dup() const {return new ControlVanetRouting(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual VanetAddress& getSrcAddress();
    virtual const VanetAddress& getSrcAddress() const {return const_cast<ControlVanetRouting*>(this)->getSrcAddress();}
    virtual void setSrcAddress(const VanetAddress& srcAddress);
    virtual VanetAddress& getDestAddress();
    virtual const VanetAddress& getDestAddress() const {return const_cast<ControlVanetRouting*>(this)->getDestAddress();}
    virtual void setDestAddress(const VanetAddress& destAddress);
    virtual int getOptionCode() const;
    virtual void setOptionCode(int optionCode);
};

inline void doPacking(cCommBuffer *b, ControlVanetRouting& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, ControlVanetRouting& obj) {obj.parsimUnpack(b);}


#endif // ifndef _CONTROLVANETROUTING_M_H_

