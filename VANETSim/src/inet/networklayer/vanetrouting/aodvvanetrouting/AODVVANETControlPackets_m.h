//
// Generated file, do not edit! Created by nedtool 4.6 from networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg.
//

#ifndef _AODVVANETCONTROLPACKETS_M_H_
#define _AODVVANETCONTROLPACKETS_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "IPv4Address.h"
#include "simtime_t.h"
#include "ModuleAccess.h"
#include "IVANETMobility.h"
#include "Coord.h"
// }}

/**
 * Struct generated from networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:34 by nedtool.
 */
struct UnreachableAODVNode
{
    UnreachableAODVNode();
    IPv4Address addr;
    unsigned int seqNum;
};

void doPacking(cCommBuffer *b, UnreachableAODVNode& a);
void doUnpacking(cCommBuffer *b, UnreachableAODVNode& a);

/**
 * Enum generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:40</tt> by nedtool.
 * <pre>
 * enum AODVVANETControlPacketType
 * {
 * 
 *     AODVVANETRoutingRREQ = 1;
 *     RREP = 2;
 *     RERR = 3;
 *     RREPACK = 4;
 * }
 * </pre>
 */
enum AODVVANETControlPacketType {
    AODVVANETRoutingRREQ = 1,
    RREP = 2,
    RERR = 3,
    RREPACK = 4
};

/**
 * Class generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:51</tt> by nedtool.
 * <pre>
 * //
 * // Base packet for AODVVANET Control Packets
 * //
 * packet AODVVANETControlPacket
 * {
 *     unsigned int packetType;
 * }
 * </pre>
 */
class AODVVANETControlPacket : public ::cPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const AODVVANETControlPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVVANETControlPacket&);

  public:
    AODVVANETControlPacket(const char *name=NULL, int kind=0);
    AODVVANETControlPacket(const AODVVANETControlPacket& other);
    virtual ~AODVVANETControlPacket();
    AODVVANETControlPacket& operator=(const AODVVANETControlPacket& other);
    virtual AODVVANETControlPacket *dup() const {return new AODVVANETControlPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, AODVVANETControlPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AODVVANETControlPacket& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:59</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODVVANET Route Request
 * //
 * class AODVVANETAODVVANETRoutingRREQ extends AODVVANETControlPacket
 * {
 *     unsigned int packetType = AODVVANETRoutingRREQ;
 *     bool joinFlag;
 *     bool repairFlag;
 *     bool gratuitousRREPFlag;
 *     bool destOnlyFlag;
 *     bool unknownSeqNumFlag;
 *     unsigned int hopCount;
 *     unsigned int rreqId;
 *     IPv4Address destAddr;
 *     unsigned int destSeqNum;
 *     IPv4Address originatorAddr;
 *     unsigned int originatorSeqNum;
 *     Coord position;
 *     Coord speed;
 *     Coord acceleration;
 *     Coord direction;
 *     double twr;
 *     double expirationTime;
 * }
 * </pre>
 */
class AODVVANETAODVVANETRoutingRREQ : public ::AODVVANETControlPacket
{
  protected:
    unsigned int packetType_var;
    bool joinFlag_var;
    bool repairFlag_var;
    bool gratuitousRREPFlag_var;
    bool destOnlyFlag_var;
    bool unknownSeqNumFlag_var;
    unsigned int hopCount_var;
    unsigned int rreqId_var;
    IPv4Address destAddr_var;
    unsigned int destSeqNum_var;
    IPv4Address originatorAddr_var;
    unsigned int originatorSeqNum_var;
    Coord position_var;
    Coord speed_var;
    Coord acceleration_var;
    Coord direction_var;
    double twr_var;
    double expirationTime_var;

  private:
    void copy(const AODVVANETAODVVANETRoutingRREQ& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVVANETAODVVANETRoutingRREQ&);

  public:
    AODVVANETAODVVANETRoutingRREQ(const char *name=NULL);
    AODVVANETAODVVANETRoutingRREQ(const AODVVANETAODVVANETRoutingRREQ& other);
    virtual ~AODVVANETAODVVANETRoutingRREQ();
    AODVVANETAODVVANETRoutingRREQ& operator=(const AODVVANETAODVVANETRoutingRREQ& other);
    virtual AODVVANETAODVVANETRoutingRREQ *dup() const {return new AODVVANETAODVVANETRoutingRREQ(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual bool getJoinFlag() const;
    virtual void setJoinFlag(bool joinFlag);
    virtual bool getRepairFlag() const;
    virtual void setRepairFlag(bool repairFlag);
    virtual bool getGratuitousRREPFlag() const;
    virtual void setGratuitousRREPFlag(bool gratuitousRREPFlag);
    virtual bool getDestOnlyFlag() const;
    virtual void setDestOnlyFlag(bool destOnlyFlag);
    virtual bool getUnknownSeqNumFlag() const;
    virtual void setUnknownSeqNumFlag(bool unknownSeqNumFlag);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual unsigned int getRreqId() const;
    virtual void setRreqId(unsigned int rreqId);
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<AODVVANETAODVVANETRoutingRREQ*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual IPv4Address& getOriginatorAddr();
    virtual const IPv4Address& getOriginatorAddr() const {return const_cast<AODVVANETAODVVANETRoutingRREQ*>(this)->getOriginatorAddr();}
    virtual void setOriginatorAddr(const IPv4Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
    virtual Coord& getPosition();
    virtual const Coord& getPosition() const {return const_cast<AODVVANETAODVVANETRoutingRREQ*>(this)->getPosition();}
    virtual void setPosition(const Coord& position);
    virtual Coord& getSpeed();
    virtual const Coord& getSpeed() const {return const_cast<AODVVANETAODVVANETRoutingRREQ*>(this)->getSpeed();}
    virtual void setSpeed(const Coord& speed);
    virtual Coord& getAcceleration();
    virtual const Coord& getAcceleration() const {return const_cast<AODVVANETAODVVANETRoutingRREQ*>(this)->getAcceleration();}
    virtual void setAcceleration(const Coord& acceleration);
    virtual Coord& getDirection();
    virtual const Coord& getDirection() const {return const_cast<AODVVANETAODVVANETRoutingRREQ*>(this)->getDirection();}
    virtual void setDirection(const Coord& direction);
    virtual double getTwr() const;
    virtual void setTwr(double twr);
    virtual double getExpirationTime() const;
    virtual void setExpirationTime(double expirationTime);
};

inline void doPacking(cCommBuffer *b, AODVVANETAODVVANETRoutingRREQ& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AODVVANETAODVVANETRoutingRREQ& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:84</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODVVANET Route Reply
 * //
 * class AODVVANETRoutingRREP extends AODVVANETControlPacket
 * {
 *     unsigned int packetType = RREP;
 *     bool repairFlag;
 *     bool ackRequiredFlag;
 *     unsigned int prefixSize;
 *     unsigned int hopCount;
 *     IPv4Address destAddr;
 *     unsigned int destSeqNum;
 *     IPv4Address originatorAddr;
 *     unsigned int originatorSeqNum;
 *     simtime_t lifeTime;
 *     double twr;
 *     double expirationTime;
 * }
 * </pre>
 */
class AODVVANETRoutingRREP : public ::AODVVANETControlPacket
{
  protected:
    unsigned int packetType_var;
    bool repairFlag_var;
    bool ackRequiredFlag_var;
    unsigned int prefixSize_var;
    unsigned int hopCount_var;
    IPv4Address destAddr_var;
    unsigned int destSeqNum_var;
    IPv4Address originatorAddr_var;
    unsigned int originatorSeqNum_var;
    simtime_t lifeTime_var;
    double twr_var;
    double expirationTime_var;

  private:
    void copy(const AODVVANETRoutingRREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVVANETRoutingRREP&);

  public:
    AODVVANETRoutingRREP(const char *name=NULL);
    AODVVANETRoutingRREP(const AODVVANETRoutingRREP& other);
    virtual ~AODVVANETRoutingRREP();
    AODVVANETRoutingRREP& operator=(const AODVVANETRoutingRREP& other);
    virtual AODVVANETRoutingRREP *dup() const {return new AODVVANETRoutingRREP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual bool getRepairFlag() const;
    virtual void setRepairFlag(bool repairFlag);
    virtual bool getAckRequiredFlag() const;
    virtual void setAckRequiredFlag(bool ackRequiredFlag);
    virtual unsigned int getPrefixSize() const;
    virtual void setPrefixSize(unsigned int prefixSize);
    virtual unsigned int getHopCount() const;
    virtual void setHopCount(unsigned int hopCount);
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<AODVVANETRoutingRREP*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual unsigned int getDestSeqNum() const;
    virtual void setDestSeqNum(unsigned int destSeqNum);
    virtual IPv4Address& getOriginatorAddr();
    virtual const IPv4Address& getOriginatorAddr() const {return const_cast<AODVVANETRoutingRREP*>(this)->getOriginatorAddr();}
    virtual void setOriginatorAddr(const IPv4Address& originatorAddr);
    virtual unsigned int getOriginatorSeqNum() const;
    virtual void setOriginatorSeqNum(unsigned int originatorSeqNum);
    virtual simtime_t getLifeTime() const;
    virtual void setLifeTime(simtime_t lifeTime);
    virtual double getTwr() const;
    virtual void setTwr(double twr);
    virtual double getExpirationTime() const;
    virtual void setExpirationTime(double expirationTime);
};

inline void doPacking(cCommBuffer *b, AODVVANETRoutingRREP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AODVVANETRoutingRREP& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:103</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODVVANET Route Error
 * //
 * class AODVVANETRoutingRERR extends AODVVANETControlPacket
 * {
 *     unsigned int packetType = RERR;
 *     UnreachableAODVNode unreachableAODVNodes[];
 *     bool noDeleteFlag;
 *     unsigned int destCount;
 * }
 * </pre>
 */
class AODVVANETRoutingRERR : public ::AODVVANETControlPacket
{
  protected:
    unsigned int packetType_var;
    UnreachableAODVNode *unreachableAODVNodes_var; // array ptr
    unsigned int unreachableAODVNodes_arraysize;
    bool noDeleteFlag_var;
    unsigned int destCount_var;

  private:
    void copy(const AODVVANETRoutingRERR& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVVANETRoutingRERR&);

  public:
    AODVVANETRoutingRERR(const char *name=NULL);
    AODVVANETRoutingRERR(const AODVVANETRoutingRERR& other);
    virtual ~AODVVANETRoutingRERR();
    AODVVANETRoutingRERR& operator=(const AODVVANETRoutingRERR& other);
    virtual AODVVANETRoutingRERR *dup() const {return new AODVVANETRoutingRERR(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
    virtual void setUnreachableAODVNodesArraySize(unsigned int size);
    virtual unsigned int getUnreachableAODVNodesArraySize() const;
    virtual UnreachableAODVNode& getUnreachableAODVNodes(unsigned int k);
    virtual const UnreachableAODVNode& getUnreachableAODVNodes(unsigned int k) const {return const_cast<AODVVANETRoutingRERR*>(this)->getUnreachableAODVNodes(k);}
    virtual void setUnreachableAODVNodes(unsigned int k, const UnreachableAODVNode& unreachableAODVNodes);
    virtual bool getNoDeleteFlag() const;
    virtual void setNoDeleteFlag(bool noDeleteFlag);
    virtual unsigned int getDestCount() const;
    virtual void setDestCount(unsigned int destCount);
};

inline void doPacking(cCommBuffer *b, AODVVANETRoutingRERR& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AODVVANETRoutingRERR& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:114</tt> by nedtool.
 * <pre>
 * //
 * // Represents an AODVVANET Route Reply ACK
 * //
 * class AODVVANETRoutingRREPACK extends AODVVANETControlPacket
 * {
 *     unsigned int packetType = RREPACK;
 * }
 * </pre>
 */
class AODVVANETRoutingRREPACK : public ::AODVVANETControlPacket
{
  protected:
    unsigned int packetType_var;

  private:
    void copy(const AODVVANETRoutingRREPACK& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AODVVANETRoutingRREPACK&);

  public:
    AODVVANETRoutingRREPACK(const char *name=NULL);
    AODVVANETRoutingRREPACK(const AODVVANETRoutingRREPACK& other);
    virtual ~AODVVANETRoutingRREPACK();
    AODVVANETRoutingRREPACK& operator=(const AODVVANETRoutingRREPACK& other);
    virtual AODVVANETRoutingRREPACK *dup() const {return new AODVVANETRoutingRREPACK(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual unsigned int getPacketType() const;
    virtual void setPacketType(unsigned int packetType);
};

inline void doPacking(cCommBuffer *b, AODVVANETRoutingRREPACK& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AODVVANETRoutingRREPACK& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>networklayer/vanetrouting/aodvvanetrouting/AODVVANETControlPackets.msg:122</tt> by nedtool.
 * <pre>
 * //
 * // Represents a timer for a Route Reply packet
 * //
 * message WaitForAODVVANETRoutingRREP
 * {
 *     IPv4Address destAddr;
 *     unsigned int lastTTL;
 *     bool fromInvalidEntry;
 * }
 * </pre>
 */
class WaitForAODVVANETRoutingRREP : public ::cMessage
{
  protected:
    IPv4Address destAddr_var;
    unsigned int lastTTL_var;
    bool fromInvalidEntry_var;

  private:
    void copy(const WaitForAODVVANETRoutingRREP& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const WaitForAODVVANETRoutingRREP&);

  public:
    WaitForAODVVANETRoutingRREP(const char *name=NULL, int kind=0);
    WaitForAODVVANETRoutingRREP(const WaitForAODVVANETRoutingRREP& other);
    virtual ~WaitForAODVVANETRoutingRREP();
    WaitForAODVVANETRoutingRREP& operator=(const WaitForAODVVANETRoutingRREP& other);
    virtual WaitForAODVVANETRoutingRREP *dup() const {return new WaitForAODVVANETRoutingRREP(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPv4Address& getDestAddr();
    virtual const IPv4Address& getDestAddr() const {return const_cast<WaitForAODVVANETRoutingRREP*>(this)->getDestAddr();}
    virtual void setDestAddr(const IPv4Address& destAddr);
    virtual unsigned int getLastTTL() const;
    virtual void setLastTTL(unsigned int lastTTL);
    virtual bool getFromInvalidEntry() const;
    virtual void setFromInvalidEntry(bool fromInvalidEntry);
};

inline void doPacking(cCommBuffer *b, WaitForAODVVANETRoutingRREP& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, WaitForAODVVANETRoutingRREP& obj) {obj.parsimUnpack(b);}


#endif // ifndef _AODVVANETCONTROLPACKETS_M_H_

