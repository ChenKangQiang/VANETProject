//
// Generated file, do not edit! Created by opp_msgc 4.4 from src/routing/gpsr/VS_GPSR.msg.
//

#ifndef _VS_GPSR_M_H_
#define _VS_GPSR_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0404
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "IPvXAddress.h"
#include "Coord.h"
#include "VS_GPSRDefs.h"
// }}



/**
 * Class generated from <tt>src/routing/gpsr/VS_GPSR.msg</tt> by opp_msgc.
 * <pre>
 * packet VS_GPSRBeacon {
 *     IPvXAddress address;
 *     Coord position;
 * }
 * </pre>
 */
class VS_GPSRBeacon : public ::cPacket
{
  protected:
    IPvXAddress address_var;
    Coord position_var;

  private:
    void copy(const VS_GPSRBeacon& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VS_GPSRBeacon&);

  public:
    VS_GPSRBeacon(const char *name=NULL, int kind=0);
    VS_GPSRBeacon(const VS_GPSRBeacon& other);
    virtual ~VS_GPSRBeacon();
    VS_GPSRBeacon& operator=(const VS_GPSRBeacon& other);
    virtual VS_GPSRBeacon *dup() const {return new VS_GPSRBeacon(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual IPvXAddress& getAddress();
    virtual const IPvXAddress& getAddress() const {return const_cast<VS_GPSRBeacon*>(this)->getAddress();}
    virtual void setAddress(const IPvXAddress& address);
    virtual Coord& getPosition();
    virtual const Coord& getPosition() const {return const_cast<VS_GPSRBeacon*>(this)->getPosition();}
    virtual void setPosition(const Coord& position);
};

inline void doPacking(cCommBuffer *b, VS_GPSRBeacon& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VS_GPSRBeacon& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>src/routing/gpsr/VS_GPSR.msg</tt> by opp_msgc.
 * <pre>
 * packet VS_GPSRPacket {
 *     VS_GPSRForwardingMode routingMode;
 *     Coord destinationPosition;               
 *     Coord perimeterRoutingStartPosition;     
 *     Coord perimeterRoutingForwardPosition;   
 *     IPvXAddress currentFaceFirstSenderAddress;   
 *     IPvXAddress currentFaceFirstReceiverAddress; 
 *     IPvXAddress senderAddress; 
 * }
 * </pre>
 */
class VS_GPSRPacket : public ::cPacket
{
  protected:
    VS_GPSRForwardingMode routingMode_var;
    Coord destinationPosition_var;
    Coord perimeterRoutingStartPosition_var;
    Coord perimeterRoutingForwardPosition_var;
    IPvXAddress currentFaceFirstSenderAddress_var;
    IPvXAddress currentFaceFirstReceiverAddress_var;
    IPvXAddress senderAddress_var;

  private:
    void copy(const VS_GPSRPacket& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VS_GPSRPacket&);

  public:
    VS_GPSRPacket(const char *name=NULL, int kind=0);
    VS_GPSRPacket(const VS_GPSRPacket& other);
    virtual ~VS_GPSRPacket();
    VS_GPSRPacket& operator=(const VS_GPSRPacket& other);
    virtual VS_GPSRPacket *dup() const {return new VS_GPSRPacket(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual VS_GPSRForwardingMode& getRoutingMode();
    virtual const VS_GPSRForwardingMode& getRoutingMode() const {return const_cast<VS_GPSRPacket*>(this)->getRoutingMode();}
    virtual void setRoutingMode(const VS_GPSRForwardingMode& routingMode);
    virtual Coord& getDestinationPosition();
    virtual const Coord& getDestinationPosition() const {return const_cast<VS_GPSRPacket*>(this)->getDestinationPosition();}
    virtual void setDestinationPosition(const Coord& destinationPosition);
    virtual Coord& getPerimeterRoutingStartPosition();
    virtual const Coord& getPerimeterRoutingStartPosition() const {return const_cast<VS_GPSRPacket*>(this)->getPerimeterRoutingStartPosition();}
    virtual void setPerimeterRoutingStartPosition(const Coord& perimeterRoutingStartPosition);
    virtual Coord& getPerimeterRoutingForwardPosition();
    virtual const Coord& getPerimeterRoutingForwardPosition() const {return const_cast<VS_GPSRPacket*>(this)->getPerimeterRoutingForwardPosition();}
    virtual void setPerimeterRoutingForwardPosition(const Coord& perimeterRoutingForwardPosition);
    virtual IPvXAddress& getCurrentFaceFirstSenderAddress();
    virtual const IPvXAddress& getCurrentFaceFirstSenderAddress() const {return const_cast<VS_GPSRPacket*>(this)->getCurrentFaceFirstSenderAddress();}
    virtual void setCurrentFaceFirstSenderAddress(const IPvXAddress& currentFaceFirstSenderAddress);
    virtual IPvXAddress& getCurrentFaceFirstReceiverAddress();
    virtual const IPvXAddress& getCurrentFaceFirstReceiverAddress() const {return const_cast<VS_GPSRPacket*>(this)->getCurrentFaceFirstReceiverAddress();}
    virtual void setCurrentFaceFirstReceiverAddress(const IPvXAddress& currentFaceFirstReceiverAddress);
    virtual IPvXAddress& getSenderAddress();
    virtual const IPvXAddress& getSenderAddress() const {return const_cast<VS_GPSRPacket*>(this)->getSenderAddress();}
    virtual void setSenderAddress(const IPvXAddress& senderAddress);
};

inline void doPacking(cCommBuffer *b, VS_GPSRPacket& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, VS_GPSRPacket& obj) {obj.parsimUnpack(b);}


#endif // _VS_GPSR_M_H_
